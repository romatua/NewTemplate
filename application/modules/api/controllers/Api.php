<?php

defined('BASEPATH') OR exit('No direct script access allowed');

require APPPATH . '/libraries/REST_Controller.php';

use Restserver\Libraries\REST_Controller;

class Api extends REST_Controller {
    
    function __construct($config = 'rest') {
        parent::__construct($config);

        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
    
        $this->load->database();
        $this->load->helper('url');
        $this->load->library("Pdf");
        $this->load->library('email');
        $this->load->library("API_Gen");
        $this->load->model('transaction_model');
    }
    
    function index_get() {
        redirect('auth/login');
    }

    function users_post()
    {/*Test User*/
        if(strcasecmp($_SERVER['REQUEST_METHOD'], 'POST') != 0){
            $outputmessage = array('RESPON' => 'Request method must be POST!');
            //throw new Exception('Request method must be POST!');
        }

        //Make sure that the content type of the POST request has been set to application/json
        $contentType = isset($_SERVER["CONTENT_TYPE"]) ? trim($_SERVER["CONTENT_TYPE"]) : '';
        if(strcasecmp($contentType, 'application/json') != 0){
            $outputmessage = array('RESPON' => 'Content type must be: application/json');
            //throw new Exception('Content type must be: application/json');
        }

        $content = trim(file_get_contents("php://input"));
        $decoded = json_decode($content, true);
        if(!is_array($decoded)){
            $outputmessage = array('RESPON' => 'Received content contained invalid JSON!');
            //throw new Exception('Received content contained invalid JSON!');
        }else{
            $outputmessage = array(
            'noref' =>$this->post('noref'),
            'custname' =>$this->post('custname'),
            'adrs' =>$this->post('adrs'),
            'jobtitle' =>$this->post('jobtitle'),
            'dob' =>$this->post('dob'),
            'ktp' =>$this->post('ktp'),
            'tsi' =>$this->post('tsi'),
            'transdate' =>$this->post('transdate'),
            'priod' =>$this->post('priod'),
            'type' =>$this->post('type'),
            'policyinsuranceno' =>$this->post('policyinsuranceno'),
            'policyurl' =>$this->post('policyurl'),
            'statuspolicy' =>$this->post('statuspolicy'),
            'nobatch' =>$this->post('nobatch')
            );
        }
        $this->response($outputmessage, REST_Controller::HTTP_CREATED);
        // $this->some_model->update_user( ... );
        /*$message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code*/
    }

    function registerpeserta_post() {
        ini_set('display_errors', 'On');
        $this->API_Gen = new API_Gen();
        //Make sure that it is a POST request.
        $outputmessage = array('RESPON' => 'OK');
        if (strcasecmp($_SERVER['REQUEST_METHOD'], 'POST') != 0) {
            $this->response([
                'status' => FALSE,
                'message' => 'Request method must be POST!'
                    ], REST_Controller::HTTP_BAD_REQUEST);
//            throw new Exception('Request method must be POST!');
        }
        //Make sure that the content type of the POST request has been set to application/json
        $contentType = isset($_SERVER["CONTENT_TYPE"]) ? trim($_SERVER["CONTENT_TYPE"]) : '';
        if (strcasecmp($contentType, 'application/json') != 0) {
            $this->response([
                'status' => FALSE,
                'message' => 'Content type must be: application/json'
                    ], REST_Controller::HTTP_BAD_REQUEST);
//            throw new Exception('Content type must be: application/json');
        }
        //Receive the RAW post data.
        $content = trim(file_get_contents("php://input"));
        /*$content = {"username":"1","password":"1","noref": "19644870-0","custname": "ANNISA NANDA FITRIA","adrs": "JL. ABC ","jobtitle": "Pegawai Swasta","dob": "1996-11-22","ktp": "3672016211960003","premi":"","tsi": "3086000","transdate": "2018-06-16","enddate":"","priod": "365","type": "A","policyinsuranceno": "","policyurl": "","statuspolicy": "","nobatch": "1"};*/
        //Attempt to decode the incoming RAW post data from JSON.
        $decoded = json_decode($content, true);

        //If json_decode failed, the JSON is invalid.
        if (!is_array($decoded)) {
            $this->response([
                'status' => FALSE,
                'message' => 'Received content contained invalid JSON!'
                    ], REST_Controller::HTTP_BAD_REQUEST);
        } else {
            if (isset($decoded['username']) && isset($decoded['password'])) {
                $uname = $decoded['username'];
                $pwd = $decoded['password'];
                $valid_logins = $this->config->item('rest_valid_logins');

                //if (isset($valid_logins[$uname]) && $valid_logins[$uname] == $pwd) {
                if(1 == 1) {
                    try {
                        //$address = $this->akseptasiauts_model->get_KotaProvinsiByIdKecamatan($decoded['id_kecamatan']);
                        $certificate = '230.' . date("Ymd");
                        $enddate = $this->endofmassa($decoded['priod'], $decoded['transdate']);
                        $premi = $this->getPremi($decoded['transdate'],$enddate,$decoded['tsi']);

                        $branch_id = $this->config->item('branch_id');
                        $kode_cob = $this->config->item('kode_cob');
                        $tahun_priod = date('Y', strtotime($decoded['transdate']));
                        $policyinsuranceno = $this->transaction_model->gen_polis($branch_id,$kode_cob,$tahun_priod);

                        $created_date = date('Y-m-d h:i:s');
                        $created_by = 'Administrator';

                        $object_data = array(
                            'noref' =>$decoded['noref'],
                            'custname' =>$decoded['custname'],
                            'adrs' =>$decoded['adrs'],
                            'jobtitle' =>$decoded['jobtitle'],
                            'dob' =>$decoded['dob'],
                            'ktp' =>$decoded['ktp'],
                            'premi' => $premi,
                            'tsi' =>$decoded['tsi'],
                            'transdate' =>$decoded['transdate'],
                            'enddate' => $enddate,
                            'priod' =>$decoded['priod'],
                            'type' =>$decoded['type'],
                            'policyinsuranceno' =>$policyinsuranceno,
                            'policyurl' =>$decoded['policyurl'],
                            'statuspolicy' =>$decoded['statuspolicy'],
                            'nobatch' =>$decoded['nobatch'],
                            'created_date' =>$created_date,
                            'created_by' =>$created_by
                        );
                        $id_gen = $this->transaction_model->insert_registerpeserta($object_data);
                        $status_generate = $this->API_Gen->gen_sertifikat('v_sertifikat',$id_gen);
                        $this->response([
                            'status' => TRUE,
                            'message' => $status_generate
                                ], REST_Controller::HTTP_OK);
                    } catch (Exception $e) {
                        $this->response([
                            'status' => FALSE,
                            'message' => 'Received content contained invalid JSON!'
                                ], REST_Controller::HTTP_BAD_REQUEST);
                    }
                } else {
                    $this->response([
                        'status' => FALSE,
                        'message' => 'Credential invalid!'
                            ], REST_Controller::HTTP_BAD_REQUEST);
                }
            } else {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Credential undefined!'
                        ], REST_Controller::HTTP_BAD_REQUEST);
            }
        }
    }
    
    function endofmassa($offset, $tglmulai) {
        return date('Y-m-d', strtotime("+$offset days", strtotime($tglmulai)));
    }
    function getPremi($start, $end, $tsi) {
        $start1 = date_create($start);
        $end1 = date_create($end);
        $diff = date_diff($start1,$end1);
        $year = $diff->format("%y");
        $month = $diff->format("%m");
        $day = $diff->format("%d");
        if ($day > 0) {
            $month += 1;
        }
        if ($month < 3 && $year == 0) {
            $per = 0.015;
        }elseif ($month > 2 && $month < 6 && $year == 0) {
            $per = 0.02;
        }elseif ($month > 5 && $month < 9 && $year == 0) {
            $per = 0.025;
        }elseif ($month > 8 || $year >= 0){
            $per = 0.03;
        }
        return $tsi * $per;
    }
}
?>